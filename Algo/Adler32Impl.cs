namespace CryptoLab_Course3.Algo
{
    /*
     Adler-32 використовує два 16-бітних числа A та B для збереження проміжних результатів обчислень, які ініціалізуються таким чином:
        A ініціалізується як 1.
        B ініціалізується як 0.

    Виконання алгоритму:

    1.Обробка кожного байта даних: Для кожного байта вхідних даних:
        A оновлюється шляхом додавання значення поточного байта.
        B оновлюється шляхом додавання нового значення A.

    2.Модульна арифметика: 
        Після кожного додавання, A та B обробляються за модулем 65521. 
        Число 65521 є найбільшим простим числом, яке є меншим за 2^16,
        вибір саме цього числа сприяє збалансуванню між швидкістю виконання алгоритму та його здатністю розпізнавати помилки.

    3.Формування остаточного хешу після обробки всіх байтів вхідних даних:
        Фінальний хеш формується шляхом зсуву B на 16 біт вліво та виконання побітової операції OR із A.
        Таким чином, фінальне значення має форму (B << 16) | A.
     */
    internal class Adler32Impl
    {
        private const int MOD_ADLER = 65521; 

        public static uint ComputeAdler32(byte[] data)
        {
            uint a = 1, b = 0;
            for (int i = 0; i < data.Length; i++)
            {
                a = (a + data[i]) % MOD_ADLER; // Додаємо значення байту до a і беремо за модулем
                b = (b + a) % MOD_ADLER;       // Додаємо a до b і беремо за модулем
            }
            return (b << 16) | a;             // Зсуваємо b на 16 бітів і об'єднуємо з a
        }
    }
}